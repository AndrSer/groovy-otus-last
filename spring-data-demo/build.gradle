plugins {
    id 'groovy'
    id 'org.springframework.boot' version '3.0.7'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.bmuschko.docker-spring-boot-application' version "9.3.1"
}

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer

group = 'com.otus'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.codehaus.groovy:groovy-all:3.0.11'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.hibernate:hibernate-core:6.0.0.Final'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation group: 'com.h2database', name: 'h2', version: '2.1.214'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
}

test {
    useJUnitPlatform()
}

docker {
    springBootApplication {
        baseImage = 'openjdk:17-slim-buster'
        ports = [9090, 8080]
        images = ['post-manager-spring-boot:latest']
    }
}

tasks.register('createContainer', DockerCreateContainer) {
    def task = project.getTasks().getByName("dockerBuildImage")

    dependsOn task
    targetImageId task.getImageId()
    containerName = project.getName()
}